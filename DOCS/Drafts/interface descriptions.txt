3. INTERFACE DESCRIPTION
This section contains method and class declaration for all the major aspects of the program, the following code describes the public methods that are used in the program.

Screens
The following classes all extend Activity and are used to control the display.

3.1.1. MainMenu Screen
/**
 * This class is responsible for displaying the main menu screen, and reacting
 * to button presses. It is the first screen that is presented to the user.
 * /
public class MainMenu extends Activity{

   /**
 * Starts a new WalkSetupScreen activity, and displays it to the user. It is
 * called when the user presses the start walk button.
 * 
 * @param v is the View that is called the method.
 */
public void startWalkSetupScreen(View v);
}

3.1.2. WalkSetupScreen
/**
 * This class is responsible for displaying the walk setup screen which sets the
 * title and descriptions for a walk
 */
public class WalkSetupScreen  extends Activity{

   /**
    * Starts a new WalkScreen activity, displays it to the user and starts
    * recording GPS data. The details that the user has input, are passed to the
    * new activity.
    * 
    * @param v  is the View that called this method
    */
   public void startWalk(View v) ;
}
3.1.3. WalkScreen
/**
 * This class is responsible for displaying the walk screen, and reacting to button presses.
 */
public class WalkScreen extends extends Activity {

   /**
    * creates and displays a AddPoiView.
    * @param v , is the object that called the method.
    * @param v, is the object that called the method.
    */
   public void addPOI(View v);

   /**
    * creates and displays a WalkFinishedView.
    * @param v, is the object that called the method.
    */
   public void finishWalk(View v);

   /**
    * creates and displays a EditWalkView.
    * @param v, is the object that called the method.
    */
   public void editWalkDialog(View v);

   /**
    * creates and displays a CancelWalkView.
    * @param v, is the object that called the method.
    */
   public void cancelWalk(View v);

   /** Opens the gallery to add a picture to the current walk
    * @param v the object that called the method
   */
   public void getFromGallery(View v);

   /** Opens the camera app to take a picture that will be added to the walk.
    * @param v the object that called the method*/
   public void getFromCamera(View v);

   /** Adds a new point of interest*/
   public void addPoi();

   /** Starts the upload of a walk to the server.*/
   public void uploadWalk();

   /**
    * returns the user to the start screen, is called either after the upload has
    * finished or when the user cancels the walk.
    * @param status, 
    * */
   public void returnToStart(boolean status);
}
Views
Views are subsections of the screen, here we used pop up windows to both inform the user and to prompt user input.

3.1.3 DialogView
/**
 * An abstract class to easily create different popup screens which can be
 * customzied. Implements the OnClickListener interface to repsond to key
 * presses.
 */
public abstract class DialogView implements OnClickListener {
   /** Destroys the popup */
   public void dismiss();

   /** Displays the popup */
   public void show() ;
}
3.1.4. PoiDialogView

/**
 * class displays textfields where the user can enter poi information
 * and a button to add images.
 */
public class PoiDialogView extends DialogView { 

   /** 
    * sets the POI info. takes the information from the EditText fields in the dialog
    * */
   public void setPointInfo() ;

}
Models
The model classes are used to store the walk data.

3.1.5. WalkModel
/**
 * stores all information about a single walk
 */
public class WalkModel {    

   /**
    *  @return the name of the walk.
    */
   public String getTitle();

   /**
    * Sets the name of the walk
    * 
    * @param the new name of the walk.
    * */
   public void setTitle(String newTitle);

   /**
    *  @return a short description of the walk 
    */
   public String getShortDescription() ;

   /**
    * @param newShortDesc,set the short description of the walk. 
    */
   public void setShortDescription(String newShortDesc) ;

   /** 
    * @return a long description of the walk.
    */
   public String getLongDescription();

   /**
    *  @param newShortDesc,set the long description for the walk.
    */
   public void setLongDescription(String newLongDesc);

   /**
    * @return a vector of all the LocationPoint in the walk. Including
    * PointsOfInterests
    */
   public Vector<LocationPoint> getRoutePath();

   /** 
    * adds a LocationPoint to the walk. 
    * 
    * @param point, the location you want to add
    */
   public void addLocation(LocationPoint point);

   /**
    * works out the total distance traveled along the walk.
    * 
    * @return the running total of km traveled. 
    */
   public double getDistance();
   /** 
    * works out the total time taken.
    * 
    * @return the elapsed time since the walk was started
    */
   public double getTimeTaken();


}
3.1.6. LocationPoint
/**
 * This class stores a map position and records the time at which is was taken
 * /
public class LocationPoint {
/**
 * @return the Time that the recording was made
 */
public long getTime();   

/**
 * @return the longitude, the east/west distance from Greenwich.
 */
public double getLongitude();

/**
 * @return the latitude, the north/south distance from the equator.
 */
public double getLatitude();

/**
 * works out the distance between two locations.
 * 
 * @param point is the first location
 * @param point1 is the second location
 * @return the distance between the two locations in kilometers
 */
public static double distBetween(LocationPoint point, LocationPoint point2);
}
3.1.7. PointOfInterest
/**
 * Stores information about a place of interest
 */
public class PointOfInterest extends LocationPoint{

   /**
    * adds reference to an image to the poi.
    * 
    * @param newImage,is the image that is to be added
    */
   public void addImage(ImageInformation newImage);

   /**
    *  @return all the images associated with this point. 
    */
   public Vector<ImageInformation> getImages();

   /** 
    * @return the description of this place. 
    */
   public String getDescription();

   /** 
    * @param desc, sets the description of this point.
    */
   public void setDescription(String desc);

   /**
    * gets the title of the POI
    * 
    * @return String the title of the walk
    */
   public String getTitle();

   /** sets the title of this point.
    * 
    * @param title, new title
    */
   public void setTitle(String title);


}

Controllers
Below are the important classes that interact with the walk model

3.1.8. RouteRecorder
public class RouteRecorder extends Service implements LocationListener{
   /** Gets the last known position
    * @return LocationPoint object
    * */
   public LocationPoint getLastKnownPosition();

   /**
    * saves the location in the WalkModel object
    * 
    * @param loc
    */
   public void newLocation(LocationPoint loc);

   /**
    * stops the recoding of locations.
    */
   public void finishWalk();
}
3.1.19 FileTransferManager
/**
 * Handles the encoding and uploading of walk data.
 */
public class FileTransferManager{

   /**
    * makes a connection to data server and uploads all files belonging to the
    * given file.the return value will be zero if the method succeeded without
    * problems.
    * @param walk,the walkModel that will be sent to the server
    */
   public int uploadWalk(WalkModel walk);
}
